antaNT.settings.json


Package Control.sublime-settings
@
    "installed_packages":
    [
        "A File Icon",
        "AddRemoveFolder",
        "Advanced CSV",
        "AdvancedNewFile",
        "Alignment",
        "All Autocomplete",
        "ApacheConf",
        "AutoFileName",
        "Bootstrap 3 Autocomplete",
        "Bootstrap 3 Snippets",
        "Bootstrap 4 Snippets",
        "BootstrapAutocomplete",
        "BracketHighlighter",
        "CodeFormatter",
        "Color Convert",
        "ColorHelper",
        "ColorHints",
        "ColorSchemeEditor",
        "Compare Side-By-Side",
        "Drive Color Scheme",
        "Emmet",
        "HTML Boilerplate",
        "HTML-CSS-JS Prettify",
        "HTML5",
        "jQuery",
        "jQuery Snippets pack",
        "JSHint Gutter",
        "Material Theme",
        "Minifier",
        "MySQL Snippets",
        "One Dark Material - Theme",
        "Package Control",
        "PHP Companion",
        "PHP Completions Kit",
        "PHP Syntax Checker",
        "Pug",
        "ReadonlyProtect",
        "Sass",
        "SFTP",
        "SideBarEnhancements",
        "Smart Path Copy",
        "Smarty",
        "SqlBeautifier",
        "VBDotNet",
        "VBScript",
        "Visual Studio Bold Color Scheme",
    ],


sftp-config.json
@
    {
    "type": "ftp",

    "save_before_upload": true,
    "upload_on_save": true,
    "sync_down_on_open": false,
    "sync_skip_deletes": false,
    "sync_same_age": true,
    "confirm_downloads": false,
    "confirm_sync": true,
    "confirm_overwrite_newer": false,

    "connect_timeout": 30,
    "ftp_passive_mode": true,
    "remote_encoding": "utf-8",
    "allow_config_upload": true,


    "host": "vh87.hoster.by",
    "user": "nixby",
    "password": "Pi6iepaa",
    "remote_path": "/nixminsk.by",

    "ignore_regexes": [
        "\\.sublime-(project|workspace)", "sftp-config(-alt\\d?)?\\.json",
        "sftp-settings\\.json", "/venv/", "\\.svn/", "\\.hg/", "\\.git/",
        "\\.bzr", "_darcs", "CVS", "\\.DS_Store", "Thumbs\\.db", "desktop\\.ini",
        // Folders
        "__trash_files__",
        "_thumbs",
        "ckeditor",
        "fonts",
        "lib",
        "core/asido/",
        "core/backup/",
        "core/cache/",
        "core/smarty/",
        "core/temp/",
        // Files
        "\\.pdf",
        "\\.zip",
        "\\.xml",
        "\\.txt",
        "\\.text",
        "\\.cur",
        "\\.jpg",
        "\\.bmp",
        "\\.gif",
        "\\.png",
        "\\.svg",
        "534F\\w+\\.ico",
        "Desktop.ini"
    ],

    // "ignore_regexes": [
    //      "\\.git/",
    //      "\\.hg/",
    //      "\\.svn/",
    //     "\\.bmp",
    //     "\\.eot",
    //     "\\.gif",
    //     "\\.jpeg",
    //     "\\.jpg",
    //     "\\.png",
    //     "\\.tar.gz",
    //     "\\.ttf",
    //     "\\.woff",
    //     "__STORAGE",
    //     "cgi-bin",
    //     "ckeditor",
    //     "ckeditor",
    //     "core",
    //     "core/asido",
    //     "core/backup",
    //     "core/cache",
    //     "core/cashe",
    //     "core/classes",
    //     "core/files",
    //     "core/smarty",
    //     "core/temp",
    //     "core/tpl/user/tpl_100",
    //     "data",
    //     "data/files",
    //     "data/tpl_100",
    //     "examples",
    //     "filebrowser",
    //     "FM",
    //     "fonts",
    //     "install",
    //     "lib",
    //     "lib",
    //     "PHPExcel",
    //     "sftp-settings\\.json",
    //     "sitebrowser",
    //     "TEST",
    // ],

}

SFTP.sublime-settings
@
// See the left pane for the list of settings and valid values
{ "email": "boris@creolab.hr", "product_key": "1a503a-298cb9-0de61f-4cb170-0d9cb3" }

CodeFormatter.sublime-settings
@
{
    "codeformatter_debug": false,

    "codeformatter_php_options":
    {
        "syntaxes": "php", // Syntax names which must process PHP formatter
        // "php_path": "s:/OSPanel/modules/php/PHP-5.6/php-win.exe", // Path for PHP executable, e.g. "/usr/lib/php" or "C:/Program Files/PHP/php.exe". If empty, uses command "php" from system environments
        // "php_path": "c:/PHP/5.6/php-win.exe", // Path for PHP executable, e.g. "/usr/lib/php" or "C:/Program Files/PHP/php.exe". If empty, uses command "php" from system environments
        // "php_path": "d:/PHP/5.6/php-win.exe", // Path for PHP executable, e.g. "/usr/lib/php" or "C:/Program Files/PHP/php.exe". If empty, uses command "php" from system environments
        "php_path": "d:/php/php-win.exe", // Path for PHP executable, e.g. "/usr/lib/php" or "C:/Program Files/PHP/php.exe". If empty, uses command "php" from system environments
        // "php_path": "c:/PHP/php-win.exe", // Path for PHP executable, e.g. "/usr/lib/php" or "C:/Program Files/PHP/php.exe". If empty, uses command "php" from system environments
        "format_on_save": false, // Format on save. Either a boolean (true/false) or a string regexp tested on filename. Example : "^((?!.min.|vendor).)*$"
        "php55_compat": false, // PHP 5.5 compatible mode
        "psr1": false, // Activate PSR1 style
        "psr1_naming": false, // Activate PSR1 style - Section 3 and 4.3 - Class and method names case
        "psr2": false, // Activate PSR2 style
        "indent_with_space": 4, // Use spaces instead of tabs for indentation
        "enable_auto_align": true, // Enable auto align of = and =>
        "visibility_order": false, // Fixes visibility order for method in classes - PSR-2 4.2
        "smart_linebreak_after_curly": true, // Convert multistatement blocks into multiline blocks

        // Enable specific transformations. Example: ["ConvertOpenTagWithEcho", "PrettyPrintDocBlocks"]
        // You can list all available transformations from command palette: CodeFormatter: Show PHP Transformations
        // "passes": [],
        "passes": [
            "AddMissingParentheses",
             "AlignDoubleArrow",
             "CakePHPStyle",
             "AlignDoubleSlashComments",
             // "AlignPHPCode",
             // "AlignPHPCode2",
             // "AutoSemicolon",
            // "OrderAndRemoveUseClauses",
            "ReindentSwitchBlocks",
            // "UpgradeToPreg",
            // "SpaceBetweenMethods",
            // "StripSpaceWithinControlStructures",
            // "PSR2MultilineFunctionParams",
            // "ShortArray",
            "SpaceAroundParentheses",
            "PHPDocTypesToFunctionTypehint",
            // "PSR2MultilineFunctionParams"

        ],


        // Disable specific transformations
        "excludes": []
    },

    "codeformatter_js_options":
    {
        "syntaxes": "javascript,json", // Syntax names which must process JS formatter
        "format_on_save": false, // Format on save. Either a boolean (true/false) or a string regexp tested on filename. Example : "^((?!.min.|vendor).)*$"
        "indent_size": 4, // indentation size
        "indent_char": " ", // Indent character
        "indent_with_tabs": false, // Indent with one tab (overrides indent_size and indent_char options)
        "eol": "\n", // EOL symbol
        "preserve_newlines": false, // whether existing line breaks should be preserved,
        "max_preserve_newlines": 10, // maximum number of line breaks to be preserved in one chunk
        "space_in_paren": true, // Add padding spaces within paren, ie. f( a, b ) !!!
        "space_in_empty_paren": false, // Add padding spaces within paren if parent empty, ie. f(  )
        "e4x": false, // Pass E4X xml literals through untouched
        "jslint_happy": false, // if true, then jslint-stricter mode is enforced. Example function () vs function()
        "space_after_anon_function": false, // Space after anonimouse functions
        "brace_style": "collapse", // "collapse" | "expand" | "end-expand". put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line.
        "keep_array_indentation": false, // keep array indentation.
        "keep_function_indentation": false, // keep function indentation.
        "eval_code": false, // eval code
        "unescape_strings": false, // Decode printable characters encoded in xNN notation
        "wrap_line_length": 0, // Wrap lines at next opportunity after N characters
        "unindent_chained_methods": false, // Unindent chained method calls
        "break_chained_methods": false, // Break chained method calls across subsequent lines
        "end_with_newline": false, // Add new line at end of file
        "comma_first": false, // Add comma first
        "operator_position": "before-newline" // Operator position: before-newline, after-newline, preserve-newline
    },

    "codeformatter_css_options":
    {
        "syntaxes": "css,less", // Syntax names which must process CSS formatter
        "format_on_save": false, // Format on save. Either a boolean (true/false) or a string regexp tested on filename. Example : "^((?!.min.|vendor).)*$"
        "indent_size": 4, // Indentation size
        "indent_char": " ", // Indentation character
        "indent_with_tabs": false, // Indent with one tab (overrides indent_size and indent_char options)
        "selector_separator_newline": false, // Add new lines after selector separators
        "end_with_newline": false, // Add new line of end in file
        "newline_between_rules": false, // Add new line between rules
        "space_around_combinator": false, // Space around combinator
        "eol": "\n" // EOL symbol
    },

    "codeformatter_scss_options":
    {
        "syntaxes": "scss,sass", // Indentation size
        "format_on_save": false, // Format on save. Either a boolean (true/false) or a string regexp tested on filename. Example : "^((?!.min.|vendor).)*$"
        "indent_size": 4, // Indentation size
        "indent_char": " ", // Indentation character
        "indent_with_tabs": false, // Indent with one tab (overrides indent_size and indent_char options)
        "selector_separator_newline": false, // Add new lines after selector separators
        "end_with_newline": false, // Add new line of end in file
        "newline_between_rules": false, // Add new line between rules
        "space_around_combinator": false, // Space around combinator
        "eol": "\n" // EOL symbol
    },

    "codeformatter_html_options":
    {
        "syntaxes": "html,blade,asp,xml", // Syntax names which must process HTML formatter
        "format_on_save": false, // Format on save. Either a boolean (true/false) or a string regexp tested on filename. Example : "^((?!.min.|vendor).)*$"
        "formatter_version": "regexp", // Which formatter to use. Current options are "bs4" and "regexp". If an error occurs while loading the bs4 formatter, the regexp formatter will automatically be used
        "indent_size": 4, // indentation size
        "indent_char": " ", // Indentation character
        "indent_with_tabs": false, // Indent with one tab (overrides indent_size and indent_char options)
        "exception_on_tag_mismatch": false, // If the last closing tag is not at the same indentation level as the first opening tag, there's probably a tag mismatch in the file
        "expand_javascript": false, // (Under construction) Expand JavaScript inside of <script> tags (also affects CSS purely by coincidence)
        "expand_tags": false, // Expand tag attributes onto new lines
        "minimum_attribute_count": 2, // Minimum number of attributes needed before tag attributes are expanded to new lines
        "first_attribute_on_new_line": false, // Put all attributes on separate lines from the tag (only uses 1 indentation unit as opposed to lining all attributes up with the first)
        "reduce_empty_tags": false, // Put closing tags on same line as opening tag if there is no content between them
        "reduce_whole_word_tags": true, // Put closing tags on same line as opening tag if there is whole word between them
        "custom_singletons": "<meta>,<br>" // Custom singleton tags for various template languages outside of the HTML5 spec
    },

    "codeformatter_python_options":
    {
        "syntaxes": "python", // Syntax names which must process Python formatter
        "format_on_save": false, // Format on save. Either a boolean (true/false) or a string regexp tested on filename. Example : "^((?!.min.|vendor).)*$"
        "indent_size": 1, // indentation size
        "indent_with_tabs": true, // Indent with tabs or spaces
        "max_char": 80, // Width of output lines in characters.
        "assignment": " = ", // This is how the assignment operator is to appear.
        "function_param_assignment": "=", // This is how function-parameter assignment should appear.
        "function_param_sep": ", ", // This is how function parameters are separated.
        "list_sep": ", ", // This is how list items are separated.
        "subscript_sep": "=", // This is how subscripts are separated.
        "dict_colon": ": ", // This separates dictionary keys from values.
        "slice_colon": ":", // this separates the start:end indices of slices.
        "comment_prefix": "# ", // This is the sentinel that marks the beginning of a commentary string.
        "shebang": "#!/usr/bin/env python", // Hashbang, a line-one comment naming the Python interpreter to Unix shells.
        "boilerplate": "", // Standard code block (if any). This is inserted after the module doc string on output.
        "blank_line": "", // This is how a blank line is to appear (up to the newline character).
        "keep_blank_lines": true, // If true, preserve one blank where blank(s) are encountered.
        "add_blank_lines_around_comments": true, // If true, set off comment blocks with blanks.
        "add_blank_line_after_doc_string": true, // If true, add blank line after doc strings.
        "max_seps_func_def": 3, // Split lines containing longer function definitions.
        "max_seps_func_ref": 5, // Split lines containing longer function calls.
        "max_seps_series": 5, // Split lines containing longer lists or tuples.
        "max_seps_dict": 3, // Split lines containing longer dictionary definitions.
        "max_lines_before_split_lit": 2, // Split string literals containing more newline characters.
        "left_margin": "", // This is how the left margin is to appear.
        "normalize_doc_strings": false, // If true, normalize white space in doc strings.
        "leftjust_doc_strings": false, // If true, left justify doc strings.
        "wrap_doc_strings": false, // If true, wrap doc strings to max_char.
        "leftjust_comments": false, // If true, left justify comments.
        "wrap_comments": false, // If true, wrap comments to max_char.
        "double_quoted_strings": false, // If true, use quotes instead of apostrophes for string literals.
        "single_quoted_strings": false, // If true, use apostrophes instead of quotes for string literals.
        "can_split_strings": false, // If true, longer strings are split at the max_char.
        "doc_tab_replacement": "....", // This literal replaces tab characters in doc strings and comments.

        // Optionally preserve unassigned constants so that code to be tidied
        // may contain blocks of commented-out lines that have been no-op'ed
        // with leading and trailing triple quotes.  Python scripts may declare
        // constants without assigning them to a variables, but CodeFormatter
        // considers this wasteful and normally elides them.
        "keep_unassigned_constants": false,

        // Optionally omit parentheses around tuples, which are superfluous
        // after all.  Normal CodeFormatter behavior will be still to include them
        // as a sort of tuple display analogous to list displays, dict
        // displays, and yet-to-come set displays.
        "parenthesize_tuple_display": true,

        // When CodeFormatter splits longer lines because max_seps
        // are exceeded, the statement normally is closed before the margin is
        // restored.  The closing bracket, brace, or parenthesis is placed at the
        // current indent level.  This looks ugly to "C" programmers.  When
        // java_style_list_dedent is True, the closing bracket, brace, or
        // parenthesis is brought back left to the indent level of the enclosing
        // statement.
        "java_style_list_dedent": false
    },

    "codeformatter_vbscript_options":
    {
        "syntaxes": "vbscript", // Syntax names which must process VBScript formatter
        "format_on_save": false, // Format on save. Either a boolean (true/false) or a string regexp tested on filename. Example : "^((?!.min.|vendor).)*$"
        "indent_size": 1, // indentation size
        "indent_char": "\t", // Indentation character
        "indent_with_tabs": true, // Indent with one tab (overrides indent_size and indent_char options)
        "preserve_newlines": true, // Preserve existing line-breaks
        "max_preserve_newlines": 10, // Maximum number of line-breaks to be preserved in one chunk
        "opening_tags": "^(Function .*|Sub .*|If .* Then|For .*|Do While .*|Select Case.*)", // List of keywords which open a new block
        "middle_tags": "^(Else|ElseIf .* Then|Case .*)$", // List of keywords which divide a block, but neither open or close the block
        "closing_tags": "(End Function|End Sub|End If|Next|Loop|End Select)$" // List of keywords which close an open block
    },

    "codeformatter_coldfusion_options":
    {
        "syntaxes": "coldfusion,cfm,cfml", // Syntax names which must process Coldfusion Markup Language formatter
        "format_on_save": false, // Format on save. Either a boolean (true/false) or a string regexp tested on filename. Example : "^((?!.min.|vendor).)*$"
        "indent_size": 2, // indentation size
        "indent_char": " ", // Indentation character
        "indent_with_tabs": false, // Indent with one tab (overrides indent_size and indent_char options)
        "exception_on_tag_mismatch": false, // If the last closing tag is not at the same indentation level as the first opening tag, there's probably a tag mismatch in the file
        "expand_javascript": false, // (Under construction) Expand JavaScript inside of <script> tags (also affects CSS purely by coincidence)
        "expand_tags": false, // Expand tag attributes onto new lines
        "minimum_attribute_count": 2, // Minimum number of attributes needed before tag attributes are expanded to new lines
        "first_attribute_on_new_line": false, // Put all attributes on separate lines from the tag (only uses 1 indentation unit as opposed to lining all attributes up with the first)
        "reduce_empty_tags": false, // Put closing tags on same line as opening tag if there is no content between them
        "reduce_whole_word_tags": false, // Put closing tags on same line as opening tag if there is whole word between them
        "custom_singletons": "" // Custom singleton tags for various template languages outside of the HTML5 spec
    }


}



/*
Available PHP Tranformations:

    - AddMissingParentheses             Add extra parentheses in new instantiations.

    - AliasToMaster                     Replace function aliases to their masters - only basic syntax alias.

    - AlignConstVisibilityEquals        Vertically align "=" of visibility and const blocks.

    - AlignDoubleArrow                  Vertically align T_DOUBLE_ARROW (=>).

    - AlignDoubleSlashComments          Vertically align "//" comments.

    - AlignEquals                       Vertically align "=".

    - AlignGroupDoubleArrow             Vertically align T_DOUBLE_ARROW (=>) by line groups.

    - AlignPHPCode                      Align PHP code within HTML block.

    - AlignPHPCode2                     Align PHP code within opening and closing php block.

    - AlignTypehint                     Vertically align function type hints.

    - AllmanStyleBraces                 Transform all curly braces into Allman-style.

    - AutoPreincrement                  Automatically convert postincrement to preincrement.

    - AutoSemicolon                     Add semicolons in statements ends.

    - CakePHPStyle                      Applies CakePHP Coding Style

    - ClassToSelf                       "self" is preferred within class, trait or interface.

    - ClassToStatic                     "static" is preferred within class, trait or interface.

    - ConvertOpenTagWithEcho            Convert from "<?=" to "<?php echo ".

    - DocBlockToComment                 Replace docblocks with regular comments when used in non structural elements.

    - DoubleToSingleQuote               Convert from double to single quotes.

    - EchoToPrint                       Convert from T_ECHO to print.

    - EncapsulateNamespaces             Encapsulate namespaces with curly braces

    - GeneratePHPDoc                    Automatically generates PHPDoc blocks

    - IndentTernaryConditions           Applies indentation to ternary conditions.

    - JoinToImplode                     Replace implode() alias (join() -> implode()).

    - LeftWordWrap                      Word wrap at 80 columns - left justify.

    - LongArray                         Convert short to long arrays.

    - MergeElseIf                       Merge if with else.

    - SplitElseIf                       Merge if with else.

    - MergeNamespaceWithOpenTag         Ensure there is no more than one linebreak before namespace

    - MildAutoPreincrement              Automatically convert postincrement to preincrement. (Deprecated pass. Use AutoPreincrement instead).

    - NewLineBeforeReturn               Add an empty line before T_RETURN.

    - OrganizeClass                     Organize class, interface and trait structure.

    - OrderAndRemoveUseClauses          Order use block and remove unused imports.

    - OnlyOrderUseClauses               Order use block - do not remove unused imports.

    - OrderMethod                       Organize class, interface and trait structure.

    - OrderMethodAndVisibility          Organize class, interface and trait structure.

    - PHPDocTypesToFunctionTypehint     Read variable types from PHPDoc blocks and add them in function signatures.

    - PrettyPrintDocBlocks              Prettify Doc Blocks

    - PSR2EmptyFunction                 Merges in the same line of function header the body of empty functions.

    - PSR2MultilineFunctionParams       Break function parameters into multiple lines.

    - ReindentAndAlignObjOps            Align object operators.

    - ReindentSwitchBlocks              Reindent one level deeper the content of switch blocks.

    - RemoveIncludeParentheses          Remove parentheses from include declarations.

    - RemoveSemicolonAfterCurly         Remove semicolon after closing curly brace.

    - RemoveUseLeadingSlash             Remove leading slash in T_USE imports.

    - ReplaceBooleanAndOr               Convert from "and"/"or" to "&&"/"||". Danger! This pass leads to behavior change.

    - ReplaceIsNull                     Replace is_null($a) with null === $a.

    - RestoreComments                   Revert any formatting of comments content.

    - ReturnNull                        Simplify empty returns.

    - ShortArray                        Convert old array into new array. (array() -> [])

    - SmartLnAfterCurlyOpen             Add line break when implicit curly block is added.

    - SortUseNameSpace                  Organize use clauses by length and alphabetic order.

    - SpaceAroundControlStructures      Add space around control structures.

    - SpaceAroundExclamationMark        Add spaces around exclamation mark.

    - SpaceAroundParentheses            Add spaces inside parentheses.

    - SpaceBetweenMethods               Put space between methods.

    - StrictBehavior                    Activate strict option in array_search, base64_decode, in_array, array_keys, mb_detect_encoding. Danger! This pass leads to behavior change.

    - StrictComparison                  All comparisons are converted to strict. Danger! This pass leads to behavior change.

    - StripExtraCommaInArray            Remove trailing commas within array blocks

    - StripNewlineAfterClassOpen        Strip empty lines after class opening curly brace.

    - StripNewlineAfterCurlyOpen        Strip empty lines after opening curly brace.

    - StripNewlineWithinClassBody       Strip empty lines after class opening curly brace.

    - StripSpaces                       Remove all empty spaces

    - StripSpaceWithinControlStructures Strip empty lines within control structures.

    - TightConcat                       Ensure string concatenation does not have spaces, except when close to numbers.

    - TrimSpaceBeforeSemicolon          Remove empty lines before semi-colon.

    - UpgradeToPreg                     Upgrade ereg_* calls to preg_*

    - WordWrap                          Word wrap at 80 columns.

    - WrongConstructorName              Update old constructor names into new ones. http://php.net/manual/en/language.oop5.decon.php

    - YodaComparisons                   Execute Yoda Comparisons.
*/
